import sqlite3
import sys
import time
import telebot
from telebot.types import *
from admin import db as db_admin
import config as config
import users_function
from config import token, admins
from admin import keyboards as admin_keyboards
import keyboards
from telebot import types

bot = telebot.TeleBot(token, threaded=False)
sys.setrecursionlimit(10 ** 6)
conn = sqlite3.connect("db/data.db")
conn_user = sqlite3.connect("db/users.db")

@bot.message_handler(commands=["admin"], func=lambda m: m.from_user.id == m.chat.id and m.from_user.id in config.admins)
def admin_command(message: Message):
    user_id = message.chat.id
    bot.send_message(user_id, '–ê–¥–º–∏–Ω –º–µ–Ω—é', reply_markup=admin_keyboards.main())

@bot.message_handler(commands=["start"], func=lambda m: m.from_user.id == m.chat.id)
def start(message: Message):
    user_id = message.chat.id
    chat_id = message.chat.id

    c_user = conn_user.cursor()
    c = conn.cursor()

    if c_user.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)).fetchone() is None:
        c_user.execute("INSERT INTO users (user_id, state) VALUES (?, ?)", (user_id, 0))
        conn_user.commit()

    if c.execute("SELECT * FROM clients WHERE user_id = ?", (user_id,)).fetchone() is None:
        username = message.from_user.username
        last_name = message.from_user.last_name
        first_name = message.from_user.first_name
        c.execute("INSERT INTO clients (user_id, user_name, last_name, dataReq, first_name) VALUES (?, ?, ?, ?, ?)",
                  (user_id, username, last_name, int(time.time()), first_name))
        conn.commit()

    def process_add_user(message: Message, column):
        chat_id = message.chat.id
        if message.text != '/start':
            bot.clear_step_handler(message)
            users_function.update_column_clients(chat_id, column=column, value=str(message.text))

            if column == 'apartment':
                client = users_function.get_client(chat_id)
                text = f"–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è! <a href='tg://user?id={chat_id}'>–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É</a>\n\n" \
                    f"–Ü–º'—è: {client['name']}\n" \
                    f"–Ü–î: {chat_id}\n" \
                    f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{client['user_name']}\n" \
                    f"–í—É–ª–∏—Ü—è: {client['street']}\n" \
                    f"–ë—É–¥–∏–Ω–æ–∫: {client['house']}\n" \
                    f"–ö–≤–∞—Ä—Ç–∏—Ä–∞: {client['apartment']}"
                try:
                    bot.send_message(config.group_id, text, parse_mode='html',
                                 reply_markup=InlineKeyboardMarkup().row(
                                     InlineKeyboardButton(text='‚úÖ', callback_data=f'acceptUser_{chat_id}')
                                 ).row(
                                     InlineKeyboardButton(text='‚ùå', callback_data=f'declineUser_{chat_id}')
                                 ))
                except:
                    pass
        else:
            bot.send_message(chat_id, f"–ù–µ –≤—ñ—Ä–Ω—ñ –¥–∞–Ω–Ω—ñ")

    client = users_function.get_client(user_id)
    if not client['name']:
        bot.clear_step_handler(message)
        bot.send_message(chat_id, f"–í–∞—à–µ –ü–Ü–ü –±—É–¥—å –ª–∞—Å–∫–∞:", reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(message, lambda m: process_add_user(m, 'name'))

    elif not client['street']:
        bot.send_message(chat_id, f"–©–æ–± —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –í–∞—Å –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ –¥–µ –í–∏ –ø—Ä–æ–∂–∏–≤–∞—î—Ç–µ, –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –≤—É–ª–∏—Ü—ñ:",
                         reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(message, lambda m: process_add_user(m, 'street'))

    elif not client['house']:
        bot.send_message(chat_id, f"–°—É–ø–µ—Ä! –Ø–∫–∏–π —É –í–∞—Å –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É?", reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(message, lambda m: process_add_user(m, 'house'))

    elif not client['apartment']:
        bot.send_message(chat_id, f"–ß—É–¥–æ–≤–æ! –ê –∑ —è–∫–æ—ó –í–∏ –∫–≤–∞—Ä—Ç–∏—Ä–∏?", reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(message, lambda m: process_add_user(m, 'apartment'))

    elif not client['verification']:
        bot.send_message(chat_id, f"–ó–∞—á–µ–∫–∞–π—Ç–µ –ø–æ–∫–∏ –≤–∞—à—ñ –¥–∞–Ω–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å –æ—Ö–æ—Ä–æ–Ω–∞!",
                         reply_markup=ReplyKeyboardRemove())
    elif client['userBlock']:
        bot.send_message(chat_id, f"–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ!", reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(user_id, '–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –¥–æ –Ω–∞—à–æ—ó –æ—Ö–æ—Ä–æ–Ω–∏', parse_mode='HTML',
                         reply_markup=keyboards.main())

@bot.message_handler(
    func=lambda m: m.text in ["üë®üèº‚ÄçüíªAdmin Panel", 'üóÇ –í–∏–≥—Ä—É–∑–∏—Ç–∏ –ë–î', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏', '–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏',
                              '–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏', '–ó–∞—è–≤–∫–∏'] and (m.chat.id in admins)
                   and m.from_user.id == m.chat.id)
def admin_panel(message: Message):
    chat_id = message.chat.id
    print(message.text)
    if message.text == "üë®üèº‚ÄçüíªAdmin Panel":
        bot.send_message(chat_id=message.chat.id,
                         text="–ê–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ Admin",
                         reply_markup=admin_keyboards.main())

    elif message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        conn = sqlite3.connect("db/users.db")
        c = conn.cursor()
        lively = c.execute("""SELECT COUNT(*) FROM users where lively = ('block')""").fetchone()[0]
        allusers = c.execute("""SELECT COUNT(*) FROM users""").fetchone()[0]
        c.close()
        text = "üôÇ *–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤* {0}\n" \
               "*% –≤—ñ–¥ —á–∏—Å–ª–∞ –≤—Å—ñ—Ö:* {1}%\n" \
               "*üí© –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö:* {2}\n".format(
            str(allusers), str(round(lively / allusers * 100, 2)), str(lively), )
        bot.send_message(message.chat.id, text, parse_mode='Markdown')

    elif message.text == 'üóÇ –í–∏–≥—Ä—É–∑–∏—Ç–∏ –ë–î':
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å –≤–∏–≥—Ä—É–∑–∫–∏ ...")
        bot.send_document(message.chat.id, users_function.get_DB(), caption=f"–ë–∞–∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        bot.send_document(message.chat.id, users_function.get_requests_DB(), caption=f"–ë–∞–∑–∞ –∑–∞–ø–∏—Ç—ñ–≤")
 
    elif message.text == '–ó–∞—è–≤–∫–∏':
        bot.send_message(message.chat.id, text='<a href="google.com">–í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞—è–≤–∫–∏</a>', parse_mode='HTML')

    elif message.text == '–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏':
        def process_block_user(message: Message):
            bot.clear_step_handler(message)
            if message.text in ['/start', '‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏']:
                bot.send_message(chat_id, f"–í—ñ–¥–º—ñ–Ω–∞", reply_markup=admin_keyboards.main())
            elif str(message.text).isnumeric():
                client = users_function.get_client(message.text)
                if client:
                    bot.send_message(chat_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {client['name']} —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!")
                    users_function.update_column_clients(chat_id, column='userBlock', value=1)

                    try:
                        bot.send_message(chat_id=message.text, text=f"–í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –±—É–ª–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!")
                    except:
                        pass
                else:
                    bot.send_message(chat_id, f"–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!",
                                     reply_markup=admin_keyboards.main())
            else:
                bot.send_message(chat_id, f"–ù–µ –≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!", reply_markup=admin_keyboards.main())

        bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å user_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –±–∞–∂–∞—î—Ç–µ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏\n"
                                  f"–ü—Ä–∏–∫–ª–∞–¥ –≤–≤–æ–¥—É: 1068853244\n\n"
                                  f"<code> * user_id –í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏ –≤–∏–≥—Ä—É–∑—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏</code>",
                         parse_mode='HTML', reply_markup=keyboards.cancel())
        bot.clear_step_handler(message)
        bot.register_next_step_handler(message, process_block_user)

    elif message.text == '–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏':
        def process_unblock_user(message: Message):
            bot.clear_step_handler(message)
            if message.text in ['/start', '‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏']:
                bot.send_message(chat_id, f"–í—ñ–¥–º—ñ–Ω–∞", reply_markup=admin_keyboards.main())
            elif str(message.text).isnumeric():
                client = users_function.get_client(message.text)
                if client:
                    bot.send_message(chat_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {client['name']} —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!")
                    users_function.update_column_clients(chat_id, column='userBlock', value=0)

                    try:
                        bot.send_message(chat_id=message.text, text=f"–í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –±—É–ª–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!")
                    except:
                        pass
                else:
                    bot.send_message(chat_id, f"–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!",
                                     reply_markup=admin_keyboards.main())
            else:
                bot.send_message(chat_id, f"–ù–µ –≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!", reply_markup=admin_keyboards.main())

        bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å user_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –±–∞–∂–∞—î—Ç–µ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏\n"
                                  f"–ü—Ä–∏–∫–ª–∞–¥ –≤–≤–æ–¥—É: 1068853244\n\n"
                                  f"<code> * user_id –í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏ –≤–∏–≥—Ä—É–∑—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏</code>",
                         parse_mode='HTML', reply_markup=keyboards.cancel())
        bot.clear_step_handler(message)
        bot.register_next_step_handler(message, process_unblock_user)

    elif message.text == '–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏':
        def process_rewrite(message: Message):
            bot.clear_step_handler(message)
            if message.text in ['/start', '‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏']:
                bot.send_message(chat_id, f"–í—ñ–¥–º—ñ–Ω–∞", reply_markup=admin_keyboards.main())
            elif str(message.text).isnumeric():
                client_id = message.text
                client = users_function.get_client(client_id)
                if client:
                    bot.send_message(chat_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {client['name']} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ —â–æ–± –≤—ñ–Ω –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–≤—Å—è!")
                    users_function.del_user(client_id)

                    try:
                        bot.send_message(chat_id=client_id, text=f"–í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ")
                    except:
                        pass
                else:
                    bot.send_message(chat_id, f"–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!",
                                     reply_markup=admin_keyboards.main())
            else:
                bot.send_message(chat_id, f"–ù–µ –≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!", reply_markup=admin_keyboards.main())

        bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å user_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –±–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏\n"
                                  f"–ü—Ä–∏–∫–ª–∞–¥ –≤–≤–æ–¥—É: 1068853244\n\n"
                                  f"<code> * user_id –í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏ –≤–∏–≥—Ä—É–∑—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏</code>",
                         parse_mode='HTML', reply_markup=keyboards.cancel())
        bot.clear_step_handler(message)
        bot.register_next_step_handler(message, process_rewrite)


@bot.message_handler(func=lambda m: m.text in ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å"] and m.from_user.id == m.chat.id)
def car(message: Message):
    def process_time(message: Message, data):
        bot.clear_step_handler(message)
        if message.text in ['/start', '‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏']:
            start(message)
        else:
            data['time'] = message.text
            bot.send_message(chat_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∞! –í–¥–∞–ª–æ–≥–æ –¥–Ω—è)",
                             reply_markup=keyboards.main())

            client = users_function.get_client(chat_id)
            text = f"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å! <a href='tg://user?id={chat_id}'>–ù–∞–ø–∏—Å–∞—Ç–∏</a>\n\n" \
                   f"–Ü–º'—è: {client['name']}\n" \
                   f"–Ü–î: {chat_id}\n" \
                   f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{client['user_name']}\n" \
                   f"–í—É–ª–∏—Ü—è: {client['street']}\n" \
                   f"–ë—É–¥–∏–Ω–æ–∫: {client['house']}\n" \
                   f"–ö–≤–∞—Ä—Ç–∏—Ä–∞: {client['apartment']}\n" \
                   f"–ù–æ–º–µ—Ä –º–∞—à–∏–Ω–∏: {data['car']}\n" \
                   f"–ö-—Å—Ç—å –≥–æ—Å—Ç–µ–π: {data['pcsQuests']}\n" \
                   f"–ß–∞—Å: {data['time']}"

            users_function.create_request(user_id=chat_id, name=client['name'],
                                          first_name=client['first_name'], last_name=client['last_name'],
                                          user_name=client['user_name'],
                                          phone=client['phone'], street=client['street'], house=client['house'],
                                          apartment=client['apartment'], typeReq='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å',
                                          pcsQuests=data['pcsQuests'],
                                          car=data['car'], timeQuests=data['time'])

            try:
                bot.send_message(config.group_id, text, parse_mode='html')
            except:
                for admin_id in admins:
                    try:
                        bot.send_message(admin_id, text, parse_mode='html')
                    except:
                        pass

    def process_car(message: Message, data):
        bot.clear_step_handler(message)
        if message.text in ['/start', '‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏']:
            start(message)
        else:
            data['car'] = message.text
            bot.send_message(chat_id, f"–Ø–∫–∏–π –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å –ø—Ä–∏–±—É—Ç—Ç—è –≥–æ—Å—Ç–µ–π?", reply_markup=keyboards.cancel())
            bot.register_next_step_handler(message, lambda m: process_time(m, data))

    def process_pcs_quests(message: Message, data):
        bot.clear_step_handler(message)
        if message.text in ['/start', '‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏']:
            start(message)
        else:
            data['pcsQuests'] = message.text
            bot.send_message(chat_id, f"–ù–∞–ø–∏—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è", reply_markup=keyboards.cancel())
            bot.register_next_step_handler(message, lambda m: process_car(m, data))

    chat_id = message.chat.id
    client = users_function.get_client(chat_id)
    if not client['verification']:
        start(message)
    elif client['userBlock']:
        bot.send_message(chat_id, f"–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ!", reply_markup=ReplyKeyboardRemove())
    else:
        bot.clear_step_handler(message)
        bot.send_message(chat_id,
                         f"–¢–µ–ø–µ—Ä –º–æ–∂–µ–º–æ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–∑–≤—ñ–ª –ø—Ä–æ—ó–∑–¥—É. –Ø–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π –æ—á—ñ–∫—É—î—Ç–µ?",
                         reply_markup=keyboards.cancel())
        bot.register_next_step_handler(message, lambda m: process_pcs_quests(m, {}))


@bot.message_handler(func=lambda m: m.text in ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø—ñ—à–æ—Ö–æ–¥–∞"] and m.from_user.id == m.chat.id)
def people(message: Message):
    def process_time(message: Message, data):
        bot.clear_step_handler(message)
        if message.text in ['/start', '‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏']:
            start(message)
        else:
            data['time'] = message.text

            bot.send_message(chat_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∞! –í–¥–∞–ª–æ–≥–æ –¥–Ω—è)",
                             reply_markup=keyboards.main())

            client = users_function.get_client(chat_id)
            text = f"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø—ñ—à–æ—Ö–æ–¥–∞! <a href='tg://user?id={chat_id}'>–ù–∞–ø–∏—Å–∞—Ç–∏</a>\n\n" \
                   f"–Ü–º'—è: {client['name']}\n" \
                   f"–Ü–î: {chat_id}\n" \
                   f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{client['user_name']}\n" \
                   f"–í—É–ª–∏—Ü—è: {client['street']}\n" \
                   f"–ë—É–¥–∏–Ω–æ–∫: {client['house']}\n" \
                   f"–ö–≤–∞—Ä—Ç–∏—Ä–∞: {client['apartment']}\n" \
                   f"–ö-—Å—Ç—å –≥–æ—Å—Ç–µ–π: {data['pcsQuests']}\n" \
                   f"–ß–∞—Å: {data['time']}"

            users_function.create_request(user_id=chat_id, name=client['name'],
                                          first_name=client['first_name'], last_name=client['last_name'],
                                          user_name=client['user_name'],
                                          phone=client['phone'], street=client['street'], house=client['house'],
                                          apartment=client['apartment'], typeReq='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø—ñ—à–æ—Ö–æ–¥–∞',
                                          pcsQuests=data['pcsQuests'],
                                          car=None, timeQuests=data['time'])

            try:
                bot.send_message(config.group_id, text, parse_mode='html')
            except:
                for admin_id in admins:
                    try:
                        bot.send_message(admin_id, text, parse_mode='html')
                    except:
                        pass

    def process_pcs_quests(message: Message, data):
        bot.clear_step_handler(message)
        if message.text in ['/start', '‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏']:
            start(message)
        else:
            data['pcsQuests'] = message.text
            bot.send_message(chat_id, f"–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å –ø—Ä–∏–±—É—Ç—Ç—è –≥–æ—Å—Ç–µ–π?", reply_markup=keyboards.cancel())
            bot.register_next_step_handler(message, lambda m: process_time(m, data))


    chat_id = message.chat.id
    client = users_function.get_client(chat_id)
    if not client['verification']:
        start(message)
    elif client['userBlock']:
        bot.send_message(chat_id, f"–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ!", reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(chat_id,
                         f"–¢–µ–ø–µ—Ä –º–æ–∂–µ–º–æ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–∑–≤—ñ–ª –ø—Ä–æ—Ö–æ–¥—É –¥–ª—è –í–∞—à–∏—Ö –≥–æ—Å—Ç–µ–π, –∞ —Å–∫—ñ–ª—å–∫–∏ —ó—Ö –±—É–¥–µ?",
                         reply_markup=keyboards.cancel())
        bot.clear_step_handler(message)
        bot.register_next_step_handler(message, lambda m: process_pcs_quests(m, {}))


@bot.message_handler(func=lambda m: m.text in ["–í–∏–∫–ª–∏–∫–∞—Ç–∏ –æ—Ö–æ—Ä–æ–Ω—É"] and m.from_user.id == m.chat.id)
def protection(message: Message):
    def process_phone(message: Message):
        bot.clear_step_handler(message)
        if message.text in ['/start', '‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏']:
            start(message)
        else:
            try:
                print(message.contact.phone_number)
                users_function.update_column_clients(message.chat.id, column='phone',
                                                     value=message.contact.phone_number)
            except:
                users_function.update_column_clients(message.chat.id, column='phone', value=message.text)
            bot.send_message(chat_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∞! –ü–æ—Å–ø—ñ—à–∞—î–º–æ –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É!",
                             reply_markup=keyboards.main())

            user = users_function.get_client(chat_id)
            text = f"–í–∏–∫–ª–∏–∫ –æ—Ö–æ—Ä–æ–Ω–∏! <a href='tg://user?id={chat_id}'>–ù–∞–ø–∏—Å–∞—Ç–∏</a>\n\n" \
                   f"–Ü–º'—è: {user['name']}\n" \
                   f"–Ü–î: {chat_id}\n" \
                   f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user['user_name']}\n" \
                   f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"

            users_function.create_request(user_id=chat_id, name=user['name'],
                                          first_name=user['first_name'], last_name=user['last_name'],
                                          user_name=user['user_name'],
                                          phone=user['phone'], street=user['street'], house=user['house'],
                                          apartment=user['apartment'], typeReq='–í–∏–∫–ª–∏–∫ –æ—Ö–æ—Ä–æ–Ω–∏')

            try:
                bot.send_message(config.group_id, text, parse_mode='html')
            except:
                for admin_id in admins:
                    try:
                        bot.send_message(admin_id, text, parse_mode='html')
                    except:
                        pass

    chat_id = message.chat.id
    client = users_function.get_client(chat_id)
    if not client['verification']:
        start(message)
    elif client['userBlock']:
        bot.send_message(chat_id, f"–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ!", reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(chat_id, f"–ù–∞–ø–∏—à—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —ñ –æ—Ö–æ—Ä–æ–Ω–∞ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î –í–∞–º –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è:",
                         reply_markup=keyboards.phone())
        bot.clear_step_handler(message)
        bot.register_next_step_handler(message, process_phone)

@bot.message_handler()
def group_some(message: Message):
    start(message)

if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(e)
    